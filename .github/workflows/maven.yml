# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

#name: Java CI/CD
#
#on:
#  push:
#    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v3
#    - name: Setup JDK 18
#      uses: actions/setup-java@v3
#      with:
#        java-version: '18'
#        distribution: 'temurin'
#        cache: maven
#    - name: Build Project
#      run: mvn clean install
#    - name: Login to docker hub
#      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#    - name: Build docker image
#      run: docker build -t simonalan/blog-application .
#    - name: Publish image
#      run: docker push simonalan/blog-application:latest
#
#  deploy:
#    needs: build
#    runs-on: [aws-ec2-blogApplication]
#    steps:
#      - name: Pull Image from Docker hub
#        run: sudo docker pull simonalan/blog-application:latest
#      - name: Delete old container
#        run: docker rm -f blog_application_container
#      - name: Run docker container
#        run: docker run -d -p 8080:8080 --name blog_application_container simonalan/blog-application

name: CI/CD Pipeline


on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # SSH into EC2 instance and deploy containers
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            scp docker-compose.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:docker-compose.yml
            ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "docker-compose -f docker-compose.yml up -d"

